{"version":3,"sources":["redux/reducers/calendar.js","redux/reducers/index.js","redux/store.js","components/SideMenu/index.js","components/layout/ContentLayout/index.js","components/redux-form-adapters/TextField/index.js","components/EventsForm/index.js","components/CalendarView/index.js","pages/landing/MainLandingPage/index.js","routes/RouteSwitcher/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","siteLoading","events","ADD_EVENT","combineReducers","calendarReducer","state","action","type","payload","form","formReducer","store","createStore","appReducer","composeWithDevTools","applyMiddleware","thunk","SideMenuItem","children","className","SideMenu","key","text","icon","map","i","Icon","name","ContentLayout","Image","avatar","src","TextField","this","props","input","label","placeholder","disabled","min","max","meta","touched","error","id","Form","Field","Boolean","htmlFor","Input","labelPosition","Label","color","pointing","Component","defaultProps","EventsForm","submitForm","values","arr","eventName","eventDate","eventTime","push","setCalendarEvent","closeModal","resetForm","reset","onSubmit","handleSubmit","component","Button","onClick","submit","setInitialValues","editMode","console","log","event","title","start","getDay","getTime","dateStr","connect","columnData","selector","formValueSelector","initialValues","dispatch","reduxForm","validate","errors","enableReinitialize","CalendarView","calendarRef","createRef","currentView","modal","modalOpen","eventData","modalEditOpen","handleDateClick","data","setState","handleEventClick","handleModalOpen","Modal","open","onClose","Content","handler","current","handleCreateEvent","apiHandler","handleEditModalOpen","handleViewChange","view","handleEventChange","getApi","getEvents","prevProps","handleEvents","length","end","ref","header","left","center","right","dateClick","defaultView","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","eventClick","PureComponent","MainLandingPage","RouteSwitcher","exact","path","App","window","location","hostname","match","rootElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qRACMA,EAAe,CACnBC,aAAa,EACbC,OAAQ,IAIJC,EAAY,+BCFHC,4BAAgB,CAC7BC,gBDGa,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IALiB,eAMf,OAAO,2BACFF,GADL,IAEEL,YAAaM,EAAOE,UAExB,KAAKN,EACH,OAAO,2BACFG,GADL,IAEEJ,OAAQK,EAAOE,UAEnB,QACE,OAAOH,ICfXI,KAAMC,MCAOC,EAFDC,sBAAYC,EAAYC,8BAAoBC,0BAAgBC,O,yDC6BpEC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACnB,yBAAKC,UAAU,6BACZD,IAIUE,EArCE,WAaf,OACE,yBAAKD,UAAU,wBACb,yBAAKA,UAAU,eACb,4CAfY,CAChB,CAAEE,IAAK,OAAQC,KAAM,OAAQC,KAAM,QACnC,CAAEF,IAAK,YAAaC,KAAM,YAAaC,KAAM,YAC7C,CAAEF,IAAK,QAASC,KAAM,QAASC,KAAM,gBACrC,CAAEF,IAAK,WAAYC,KAAM,WAAYC,KAAM,WAC3C,CAAEF,IAAK,WAAYC,KAAM,WAAYC,KAAM,QAC3C,CAAEF,IAAK,YAAaC,KAAM,YAAaC,KAAM,gBAC7C,CAAEF,IAAK,YAAaC,KAAM,YAAaC,KAAM,YAC7C,CAAEF,IAAK,WAAYC,KAAM,WAAYC,KAAM,8BAC3C,CAAEF,IAAK,cAAeC,KAAM,cAAeC,KAAM,qBACjD,CAAEF,IAAK,WAAYC,KAAM,WAAYC,KAAM,YAO9BC,KAAI,SAAAC,GAAC,OACd,kBAAC,EAAD,CACEJ,IAAG,yBAAoBI,EAAEJ,MAEzB,kBAACK,EAAA,EAAD,CAAMC,KAAMF,EAAEF,OACd,8BAAOE,EAAEH,Y,SCaJM,EAnCO,SAAC,GAAD,IAAGV,EAAH,EAAGA,SAAH,OACpB,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,kBACb,kBAACO,EAAA,EAAD,CAAMC,KAAK,WACX,wEAGF,yBAAKR,UAAU,gBACb,yBAAKA,UAAU,gBACb,kBAACO,EAAA,EAAD,CAAMC,KAAK,sBACX,kBAACD,EAAA,EAAD,CAAMC,KAAK,aACX,kBAACD,EAAA,EAAD,CAAMC,KAAK,UAGb,yBAAKR,UAAU,YAEf,yBAAKA,UAAU,aACb,0CACA,kBAACO,EAAA,EAAD,CAAMC,KAAK,eACX,kBAACE,EAAA,EAAD,CAAOC,QAAM,EAACC,IAAI,4EAKxB,wCAECb,I,0GC1BCc,E,uKAoBM,IAAD,EAUHC,KAAKC,MARPC,EAFK,EAELA,MACAC,EAHK,EAGLA,MACA7B,EAJK,EAILA,KACA8B,EALK,EAKLA,YACAC,EANK,EAMLA,SACAC,EAPK,EAOLA,IACAC,EARK,EAQLA,IARK,IASLC,KAAQC,EATH,EASGA,QAASC,EATZ,EASYA,MAOnB,MAJM,OAAQR,IACZA,EAAMS,GAAN,aAAiBT,EAAMR,OAIvB,kBAACkB,EAAA,EAAKC,MAAN,CAAYH,MAAOI,QAAQL,GAAWC,IACnCP,GACC,2BAAOY,QAASb,EAAMS,IAAKR,GAG7B,kBAACa,EAAA,EAAD,iBACMd,EADN,CAEEG,SAAUA,EACV/B,KAAMA,EACNgC,IAAKA,EACLC,IAAKA,EACLH,YAAaA,EACba,cAAc,kBAGfR,GAAWC,GACV,kBAACQ,EAAA,EAAD,CACEC,MAAO,MACPC,UAAQ,GAEPV,Q,GAzDWW,aAAlBtB,EAYGuB,aAAe,CACpBnB,MAAO,KACPC,YAAa,KACbC,UAAU,EACVC,IAAK,KACLC,IAAK,MAgDMR,QC5DTwB,E,4MACJC,WAAa,SAACC,GACZ,IAAIC,EAAM,EAAKzB,MAAMjC,QAAU,GAC3ByD,EAAOE,WAAaF,EAAOG,WAAaH,EAAOI,YACjDH,EAAII,KAAKL,GACT,EAAKxB,MAAM8B,iBAAiBL,IAE9B,EAAKzB,MAAM+B,c,EAEbC,UAAY,WACV,EAAKhC,MAAMiC,S,uDAIX,OACE,kBAACtB,EAAA,EAAD,CAAMuB,SAAUnC,KAAKC,MAAMmC,aAAapC,KAAKwB,aAC3C,kBAACX,EAAA,EAAD,CACEwB,UAAWtC,EACXL,KAAK,YACLU,YAAY,eAEd,kBAACS,EAAA,EAAD,CACEwB,UAAWtC,EACXL,KAAK,YACLU,YAAY,eAEd,kBAACS,EAAA,EAAD,CACEwB,UAAWtC,EACXL,KAAK,YACLU,YAAY,eAEd,kBAACS,EAAA,EAAD,CACEwB,UAAWtC,EACXL,KAAK,aACLU,YAAY,UAGd,kBAACkC,EAAA,EAAD,CAAQC,QAASvC,KAAKiC,WAAtB,UACA,kBAACK,EAAA,EAAD,CAAQE,QAAM,GAAd,a,GAtCiBnB,aAsDnBoB,EAAmB,SAAChB,EAAQiB,GAChC,OAAIA,GACFC,QAAQC,IAAI,WAAYnB,GACD,CACrBE,UAAWF,EAAOoB,MAAMC,MACxBlB,UAAWH,EAAOoB,MAAME,MAAMC,SAC9BnB,UAAWJ,EAAOoB,MAAME,MAAME,YAK3B,CACLrB,UAAWH,EAAOyB,UAaPC,eATS,SAAC/E,EAAD,GAAsC,IAA5BgF,EAA2B,EAA3BA,WAAYV,EAAe,EAAfA,SACtCW,EAAWC,YAAkB,aACnC,MAAO,CACLC,cAAed,EAAiBW,EAAYV,GAC5Cf,UAAW0B,EAASjF,EAAO,aAC3BJ,OAAQI,EAAMD,gBAAgBH,UAMhC,CACE+D,iBNlE4B,SAAAc,GAAK,OAAI,SAACW,GACxCA,EAAS,CACPlF,KAAML,EACNM,QAASsE,OM4DEM,CAKbM,YAAU,CACVjF,KAAM,YACNkF,SA1Ce,SAACjC,GAChB,IAAMkC,EAAS,GAMf,OAJKlC,EAAOE,YACVgC,EAAOhC,UAAY,YAGdgC,GAoCPC,oBAAoB,GAHpBH,CAIClC,ICjFGsC,G,iOACJC,YAAcC,sB,EAEd3F,MAAQ,CACN4F,YAAa,eACbC,MAAO,KACPC,WAAW,EACXC,UAAW,KACXC,eAAe,G,EAajBC,gBAAkB,SAACC,GAEjB,EAAKC,SAAS,CACZL,WAAW,EACXC,UAAWG,K,EAGfE,iBAAmB,SAACF,GAClB,EAAKC,SAAS,CACZH,eAAe,EACfD,UAAWG,K,EAIfG,gBAAkB,SAACH,GAAD,OAChB,kBAACI,EAAA,EAAD,CACEC,KAAM,EAAKvG,MAAM8F,UACjBU,QAAS,WAAQ,EAAKL,SAAS,CAAEL,WAAW,MAE5C,kBAACQ,EAAA,EAAMG,QAAP,KACE,kBAAC,EAAD,CACEC,QAAS,EAAKhB,YAAYiB,QAC1BrC,UAAU,EACVU,WAAYkB,EACZU,kBAAmB,EAAK5G,MAAM6G,WAC9BjD,WAAY,WAAQ,EAAKuC,SAAS,CAAEL,WAAW,U,EAMvDgB,oBAAsB,SAACZ,GAAD,OACpB,kBAACI,EAAA,EAAD,CACEC,KAAM,EAAKvG,MAAMgG,cACjBQ,QAAS,WAAQ,EAAKL,SAAS,CAAEH,eAAe,MAEhD,kBAACM,EAAA,EAAMG,QAAP,KACE,kBAAC,EAAD,CACEnC,UAAQ,EACRU,WAAYkB,EACZU,kBAAmB,EAAK5G,MAAM6G,WAC9BjD,WAAY,WAAQ,EAAKuC,SAAS,CAAEH,eAAe,U,EAM3De,iBAAmB,SAACC,GAClB,EAAKb,SAAS,CAAEP,YAAaoB,K,EAG/BC,kBAAoB,SAACxC,GAEnB,OADqB,EAAKiB,YAAYiB,QAAQO,SAC1BzC,I,kEA9DpB7C,KAAK8D,YAAYiB,QAAQO,SAASC,c,yCAGjBC,GACbA,EAAUxH,SAAWgC,KAAKC,MAAMjC,QAClCgC,KAAK8D,YAAYiB,QAAQO,SAASC,c,+BA2D5B,IACAvH,EAAWgC,KAAKC,MAAhBjC,OAEFyH,EAAezH,GAAUA,EAAO0H,OAAS,EAC7C1H,EAAOuB,KAAI,SAAAC,GAAC,MACV,CACEsD,MAAOtD,EAAEmC,UACToB,MAAOvD,EAAEoC,UACT+D,IAAK,aAEJ,GAEP,OACE,yBAAKzG,UAAU,4BACb,6CAEA,kBAAC,IAAD,CACE0G,IAAK5F,KAAK8D,YACV+B,OAAQ,CACNC,KAAM,kBACNC,OAAQ,QACRC,MAAO,kDAETC,UAAWjG,KAAKqE,gBAChB6B,YAAY,eACZC,QAAS,CAAEC,IAAeC,IAAgBC,KAC1CtI,OAAQyH,EACRc,WAAYvG,KAAKwE,mBAGhBxE,KAAKyE,gBAAgBzE,KAAK5B,MAAM+F,WAChCnE,KAAKkF,oBAAoBlF,KAAK5B,MAAM+F,gB,GA3GpBqC,kBAwHZrD,eANS,SAAA/E,GAAK,MAC3B,CACEJ,OAAQI,EAAMD,gBAAgBH,UAMhC,KAFamF,CAGbU,GC9Ha4C,EATS,kBACtB,yBAAKvH,UAAU,gCACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,SCMSwH,EAVO,kBACpB,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIvE,UAAWoE,QCE1BI,E,uKANX,OACE,kBAAC,EAAD,U,GAHYxF,aCSEP,QACW,cAA7BgG,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCTAC,EACJ,kBAAC,IAAD,CAAUxI,MAAOA,GACf,kBAAC,EAAD,OAIJyI,IAASC,OAAOF,EAAaG,SAASC,eAAe,SDoH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnH,GACLiC,QAAQjC,MAAMA,EAAMoH,c","file":"static/js/main.80d31208.chunk.js","sourcesContent":["\nconst initialState = {\n  siteLoading: false,\n  events: [],\n};\n\nconst SITE_LOADING = 'SITE_LOADING';\nconst ADD_EVENT = 'test-task/calendar/add-event';\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SITE_LOADING:\n      return {\n        ...state,\n        siteLoading: action.payload,\n      };\n    case ADD_EVENT:\n      return {\n        ...state,\n        events: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const setCalendarEvent = event => (dispatch) => {\n  dispatch({\n    type: ADD_EVENT,\n    payload: event,\n  });\n}\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport calendarReducer from './calendar';\n\nexport default combineReducers({\n  calendarReducer,\n  form: formReducer,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport appReducer from 'redux/reducers';\n\nconst store = createStore(appReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\nconst SideMenu = () => {\n  const menuItems = [\n    { key: 'home', text: 'Home', icon: 'home' },\n    { key: 'dashboard', text: 'Dashboard', icon: 'industry' },\n    { key: 'inbox', text: 'Inbox', icon: 'mail outline' },\n    { key: 'products', text: 'Products', icon: 'barcode' },\n    { key: 'invoices', text: 'Invoices', icon: 'book' },\n    { key: 'customers', text: 'Customers', icon: 'user outline' },\n    { key: 'chat-room', text: 'Chat Room', icon: 'comments' },\n    { key: 'calendar', text: 'Calendar', icon: 'calendar alternate outline' },\n    { key: 'help-center', text: 'Help Center', icon: 'life ring outline' },\n    { key: 'settings', text: 'Settings', icon: 'setting' },\n  ];\n  return (\n    <div className=\"side-menu__component\">\n      <div className=\"header-item\">\n        <span>impekable</span>\n      </div>\n      {menuItems.map(i => (\n        <SideMenuItem\n          key={`side_menu_item_${i.key}`}\n        >\n          <Icon name={i.icon} />\n          <span>{i.text}</span>\n        </SideMenuItem>\n      ))}\n    </div>\n  );\n\n};\n\nconst SideMenuItem = ({ children }) => (\n  <div className=\"side-menu-item__component\">\n    {children}\n  </div>\n);\n\nexport default SideMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, Image } from 'semantic-ui-react';\n\nconst ContentLayout = ({ children }) => (\n  <div className=\"content-layout__component\">\n    <div className=\"content-layout-header\">\n      <div className=\"search-section\">\n        <Icon name=\"search\" />\n        <span>Search transactions, invoices or help</span>\n      </div>\n\n      <div className=\"user-wrapper\">\n        <div className=\"helpers-icon\">\n          <Icon name=\"life ring outline\" />\n          <Icon name=\"comments\" />\n          <Icon name=\"bell\" />\n        </div>\n\n        <div className=\"divider\" />\n\n        <div className=\"user-info\">\n          <span>John Doe</span>\n          <Icon name=\"angle down\" />\n          <Image avatar src=\"https://cdn1.iconfinder.com/data/icons/user-avatars-2/300/10-512.png\" />\n        </div>\n        </div>\n    </div>\n\n    <h1>Calendar</h1>\n\n    {children}\n  </div>\n);\n\nContentLayout.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.object]).isRequired,\n};\n\nexport default ContentLayout;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Input, Form, Label } from 'semantic-ui-react';\n\nclass TextField extends Component {\n  static propTypes = {\n    input: PropTypes.object.isRequired,\n    meta: PropTypes.object.isRequired,\n    type: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    label: PropTypes.string,\n    disabled: PropTypes.bool,\n    min: PropTypes.number,\n    max: PropTypes.number,\n  };\n\n  static defaultProps = {\n    label: null,\n    placeholder: null,\n    disabled: false,\n    min: null,\n    max: null,\n  };\n\n  render() {\n    const {\n      input,\n      label,\n      type,\n      placeholder,\n      disabled,\n      min,\n      max,\n      meta: { touched, error },\n    } = this.props;\n\n    if (!('id' in input)) {\n      input.id = `id_${input.name}`;\n    }\n\n    return (\n      <Form.Field error={Boolean(touched && error)}>\n        {label &&\n          <label htmlFor={input.id}>{label}</label>\n        }\n\n        <Input\n          {...input}\n          disabled={disabled}\n          type={type}\n          min={min}\n          max={max}\n          placeholder={placeholder}\n          labelPosition=\"right corner\"\n        />\n\n        {touched && error &&\n          <Label\n            color={'red'}\n            pointing\n          >\n            {error}\n          </Label>\n        }\n      </Form.Field>\n    );\n  }\n}\n\nexport default TextField;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Form } from 'semantic-ui-react';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { Button } from 'semantic-ui-react';\n\nimport { setCalendarEvent } from 'redux/reducers/calendar';\n\nimport { TextField } from 'components/redux-form-adapters';\n\nclass EventsForm extends Component {\n  submitForm = (values) => {\n    let arr = this.props.events || [];\n    if (values.eventName && values.eventDate && values.eventTime) {\n      arr.push(values);\n      this.props.setCalendarEvent(arr);\n    }\n    this.props.closeModal();\n  }\n  resetForm = () => {\n    this.props.reset();\n  }\n  render() {\n\n    return (\n      <Form onSubmit={this.props.handleSubmit(this.submitForm)}>\n        <Field\n          component={TextField}\n          name=\"eventName\"\n          placeholder=\"enter name\"\n        />\n        <Field\n          component={TextField}\n          name=\"eventDate\"\n          placeholder=\"enter date\"\n        />\n        <Field\n          component={TextField}\n          name=\"eventTime\"\n          placeholder=\"enter time\"\n        />\n        <Field\n          component={TextField}\n          name=\"eventNotes\"\n          placeholder=\"notes\"\n        />\n\n        <Button onClick={this.resetForm}>Cancel</Button>\n        <Button submit>Save</Button>\n      </Form>\n    );\n  }\n}\n\nconst validate = (values) => {\n  const errors = {};\n\n  if (!values.eventName) {\n    errors.eventName = 'Required'\n  }\n\n  return errors;\n};\n\nconst setInitialValues = (values, editMode) => {\n  if (editMode) {\n    console.log('editMode', values);\n    const editableValues = {\n      eventName: values.event.title,\n      eventDate: values.event.start.getDay(),\n      eventTime: values.event.start.getTime(),\n      // eventNotes: values.event.\n    };\n    return editableValues;\n  }\n  return {\n    eventDate: values.dateStr,\n  };\n}\n\nconst mapStateToProps = (state, { columnData, editMode }) => {\n  const selector = formValueSelector('EventForm');\n  return {\n    initialValues: setInitialValues(columnData, editMode),\n    eventName: selector(state, 'eventName'),\n    events: state.calendarReducer.events,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    setCalendarEvent,\n  },\n)(reduxForm({\n  form: 'EventForm',\n  validate,\n  enableReinitialize: true,\n})(EventsForm));\n","import React, { PureComponent, Fragment, createRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from '@fullcalendar/interaction'\n// import addEvent from\n\nimport { Button, Modal } from 'semantic-ui-react'\n\nimport EventsForm from 'components/EventsForm';\n\nimport '@fullcalendar/core/main.css';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\n\nclass CalendarView extends PureComponent {\n  calendarRef = createRef();\n\n  state = {\n    currentView: \"dayGridMonth\",\n    modal: null,\n    modalOpen: false,\n    eventData: null,\n    modalEditOpen: false,\n  }\n\n  componentDidMount() {\n    this.calendarRef.current.getApi().getEvents();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.events !== this.props.events) {\n      this.calendarRef.current.getApi().getEvents();\n    }\n  }\n\n  handleDateClick = (data) => {\n\n    this.setState({\n      modalOpen: true,\n      eventData: data,\n    })\n  }\n  handleEventClick = (data) => {\n    this.setState({\n      modalEditOpen: true,\n      eventData: data,\n    });\n  }\n\n  handleModalOpen = (data) => (\n    <Modal\n      open={this.state.modalOpen}\n      onClose={() => { this.setState({ modalOpen: false }); }}\n    >\n      <Modal.Content>\n        <EventsForm\n          handler={this.calendarRef.current}\n          editMode={false}\n          columnData={data}\n          handleCreateEvent={this.state.apiHandler}\n          closeModal={() => { this.setState({ modalOpen: false }); }}\n        />\n      </Modal.Content>\n    </Modal>\n  );\n\n  handleEditModalOpen = (data) => (\n    <Modal\n      open={this.state.modalEditOpen}\n      onClose={() => { this.setState({ modalEditOpen: false }); }}\n    >\n      <Modal.Content>\n        <EventsForm\n          editMode\n          columnData={data}\n          handleCreateEvent={this.state.apiHandler}\n          closeModal={() => { this.setState({ modalEditOpen: false }); }}\n        />\n      </Modal.Content>\n    </Modal>\n  );\n\n  handleViewChange = (view) => {\n    this.setState({ currentView: view })\n  }\n\n  handleEventChange = (event) => {\n    const addSomeEvent = this.calendarRef.current.getApi();\n    return addSomeEvent[event];\n  }\n  render() {\n    const { events } = this.props;\n\n    const handleEvents = events && events.length > 0 ?\n      events.map(i => (\n        {\n          title: i.eventName,\n          start: i.eventDate,\n          end: 'allDay',\n        }\n      )) : [];\n\n    return (\n      <div className=\"calendar-view__component\">\n        <h3>Calendar View</h3>\n\n        <FullCalendar\n          ref={this.calendarRef}\n          header={{\n            left: \"prev,next today\",\n            center: \"title\",\n            right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n          }}\n          dateClick={this.handleDateClick}\n          defaultView=\"dayGridMonth\"\n          plugins={[ dayGridPlugin, timeGridPlugin, interactionPlugin ]}\n          events={handleEvents}\n          eventClick={this.handleEventClick}\n        />\n\n          {this.handleModalOpen(this.state.eventData)}\n          {this.handleEditModalOpen(this.state.eventData)}\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => (\n  {\n    events: state.calendarReducer.events,\n  }\n);\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(CalendarView);\n","import React from 'react';\nimport SideMenu from 'components/SideMenu';\nimport ContentLayout from 'components/layout/ContentLayout';\nimport CalendarView from 'components/CalendarView';\n\nconst MainLandingPage = () => (\n  <div className=\"main-landing-page__component\">\n    <SideMenu />\n    <ContentLayout>\n      <CalendarView />\n    </ContentLayout>\n  </div>\n);\n\nexport default MainLandingPage;\n","import React, { Fragment } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport MainLandingPage from 'pages/landing/MainLandingPage';\n\nconst RouteSwitcher = () => (\n  <Fragment>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={MainLandingPage} />\n      </Switch>\n    </BrowserRouter>\n  </Fragment>\n);\n\nexport default RouteSwitcher;\n","import React, { Component } from 'react';\nimport RouteSwitcher from 'routes/RouteSwitcher';\n\nclass App extends Component {\n  render() {\n    return (\n      <RouteSwitcher />\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'redux/store';\n\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'shared/styles.css';\n\nconst rootElement = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(rootElement, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}